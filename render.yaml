services:
  - type: web
    name: backend
    env: docker
    dockerfilePath: ./spring-social-media/DockerFile.backend
    buildCommand: ./mvnw clean install
    startCommand: ./mvnw spring-boot:run
    envVars:
      - key: SPRING_DATASOURCE_URL
        value: jdbc:postgresql://db:5432/socialdb
      - key: SPRING_DATASOURCE_USERNAME
        value: ${SPRING_DATASOURCE_USERNAME}
      - key: SPRING_DATASOURCE_PASSWORD
        value: ${SPRING_DATASOURCE_PASSWORD}
      - key: JWT_SECRET
        value: ${JWT_SECRET}
      - key: JWT_EXPIRES
        value: ${JWT_EXPIRES}
      - key: REFRESH_EXPIRES
        value: ${REFRESH_EXPIRES}
    ports:
      - 8080

  - type: web
    name: frontend
    env: docker
    dockerfilePath: ./frontend/DockerFile.frontend
    buildCommand: npm install && npm run build
    startCommand: npm start
    envVars:
      - key: NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME
        value: ${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
      - key: NEXT_PUBLIC_UPLOAD_PRESET
        value: ${NEXT_PUBLIC_UPLOAD_PRESET}
      - key: NEXT_PUBLIC_BACKEND_URL
        value: ${NEXT_PUBLIC_BACKEND_URL}
      - key: BACKEND_URL
        value: ${BACKEND_URL}
      - key: JWT_SECRET
        value: ${JWT_SECRET}
    ports:
      - 80

  - type: database
    name: db
    databaseName: socialdb
    user: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    sqlFiles: []
    dockerImage: postgres
    dockerImageVersion: latest
    persistentDisk:
      diskName: pgdata
      sizeGB: 10
